order Data.Functor.Classes.Eq1__pair_type  Data.Functor.Classes.Ord1__pair_type
order Data.Functor.Classes.Eq2__pair_type  Data.Functor.Classes.Ord2__pair_type
order Data.Functor.Classes.Eq2__pair_type  Data.Functor.Classes.Eq1__pair_type_liftEq
order Data.Functor.Classes.Ord2__pair_type Data.Functor.Classes.Ord1__pair_type_liftCompare

order Data.Functor.Classes.Eq1__Either  Data.Functor.Classes.Ord1__Either
order Data.Functor.Classes.Eq2__Either  Data.Functor.Classes.Ord2__Either
order Data.Functor.Classes.Eq2__Either  Data.Functor.Classes.Eq1__Either_liftEq
order Data.Functor.Classes.Ord2__Either Data.Functor.Classes.Ord1__Either_liftCompare

order Data.Functor.Classes.Eq1__Const  Data.Functor.Classes.Ord1__Const
order Data.Functor.Classes.Eq2__Const  Data.Functor.Classes.Ord2__Const
order Data.Functor.Classes.Eq2__Const  Data.Functor.Classes.Eq1__Const_liftEq
order Data.Functor.Classes.Ord2__Const Data.Functor.Classes.Ord1__Const_liftCompare

order Data.Functor.Classes.Eq1__option  Data.Functor.Classes.Ord1__option
order Data.Functor.Classes.Eq2__option  Data.Functor.Classes.Ord2__option

order Data.Functor.Classes.Eq1__list  Data.Functor.Classes.Ord1__list
order Data.Functor.Classes.Eq2__list  Data.Functor.Classes.Ord2__list

order Data.Functor.Classes.Eq1__list  Data.Functor.Classes.Eq1__NonEmpty_liftEq
order Data.Functor.Classes.Ord1__list Data.Functor.Classes.Ord1__NonEmpty_liftCompare
order Data.Functor.Classes.Eq1__NonEmpty  Data.Functor.Classes.Ord1__NonEmpty
order Data.Functor.Classes.Eq2__NonEmpty  Data.Functor.Classes.Ord2__NonEmpty

order Data.Functor.Classes.Eq1__Identity  Data.Functor.Classes.Ord1__Identity
order Data.Functor.Classes.Eq2__Identity  Data.Functor.Classes.Ord2__Identity

order Data.Functor.Classes.Eq1__Proxy  Data.Functor.Classes.Ord1__Proxy
order Data.Functor.Classes.Eq2__Proxy  Data.Functor.Classes.Ord2__Proxy


skip Data.Functor.Classes.readListWith
skip Data.Functor.Classes.readsPrec1
skip Data.Functor.Classes.readsData
skip Data.Functor.Classes.readsUnary
skip Data.Functor.Classes.readsUnary1
skip Data.Functor.Classes.readsUnaryWith
skip Data.Functor.Classes.readsBinaryWith
skip Data.Functor.Classes.readsBinary1
skip Data.Functor.Classes.readsPrec2
skip Data.Functor.Classes.liftReadList2Default
skip Data.Functor.Classes.liftReadListDefault
skip Data.Functor.Classes.liftReadListPrec2Default
skip Data.Functor.Classes.liftReadListPrecDefault
skip Data.Functor.Classes.readBinaryWith
skip Data.Functor.Classes.readData
skip Data.Functor.Classes.readPrec1
skip Data.Functor.Classes.readPrec2
skip Data.Functor.Classes.readUnaryWith


skip Data.Functor.Classes.showsPrec1
skip Data.Functor.Classes.liftShowList2
skip Data.Functor.Classes.liftShowsPrec2
skip Data.Functor.Classes.liftReadList2
skip Data.Functor.Classes.liftReadsPrec2
skip Data.Functor.Classes.showsBinary1
skip Data.Functor.Classes.showsBinaryWith
skip Data.Functor.Classes.showsPrec2
skip Data.Functor.Classes.showsUnary
skip Data.Functor.Classes.showsUnary1
skip Data.Functor.Classes.showsUnaryWith

skip Data.Functor.Classes.Read2__pair_type_liftReadsPrec2
skip Data.Functor.Classes.Read2__pair_type_liftReadList2

# Manual definition as this is recursive
redefine Local Definition Data.Functor.Classes.Eq1__list_liftEq : forall {a} {b}, (a -> (b -> bool)) -> ((list a) -> ((list b) -> bool)) :=
  fun {a} {b} =>
    fix liftEq arg_69__ arg_70__ arg_71__
          := match arg_69__, arg_70__,  arg_71__ with
               | _,  nil, nil => true
               | _,  nil, cons _ _ => false
               | _,  cons _ _, nil => false
               | eq, cons x xs, cons y ys => andb (eq x y) (liftEq eq xs ys)
             end.

redefine Local Definition Data.Functor.Classes.Ord1__list_liftCompare : forall {a} {b}, (a -> (b -> comparison)) -> ((list a) -> ((list b) -> comparison)) :=
  fun {a} {b} =>
    fix liftCompare arg_69__ arg_70__ arg_71__
          := match arg_69__, arg_70__,  arg_71__ with
               | _,  nil, nil => Eq
               | _,  nil, cons _ _ => Lt
               | _,  cons _ _, nil => Gt
               | comp, cons x xs, cons y ys => GHC.Base.mappend (comp x y) (liftCompare comp xs ys)
	     end.

