# Override the Core-edit back to
in Core.Var rename type GHC.Num.Int = BinNums.N
# skip AxiomatizedTypes.Var

# add Core Axiom Core.idScope    : AxiomatizedTypes.Var -> Core.IdScope.
# add Core Axiom Core.id_details : AxiomatizedTypes.Var -> Core.IdDetails.
# add Core Axiom Core.id_info    : AxiomatizedTypes.Var -> Core.IdInfo.
# add Core Axiom Core.realUnique : AxiomatizedTypes.Var -> BinNums.N.
# add Core Axiom Core.varName    : AxiomatizedTypes.Var -> Name.Name.
# add Core Axiom Core.varType    : AxiomatizedTypes.Var -> AxiomatizedTypes.Type_.

# axiomatize definition Core.updateVarTypeM
# axiomatize definition Core.updateVarType
# axiomatize definition Core.updateTyVarKind
# axiomatize definition Core.updateTyVarKindM
# axiomatize definition Core.setVarUnique
# axiomatize definition Core.setVarType
# axiomatize definition Core.setVarName
# axiomatize definition Core.setTyVarKind
# axiomatize definition Core.setIdDetails
# axiomatize definition Core.lazySetIdInfo
# axiomatize definition Core.isLocalId
# axiomatize definition Core.isId
# axiomatize definition Core.isCoVar
# axiomatize definition Core.isGlobalId
# axiomatize definition Core.isExportedId
# axiomatize definition Core.isNonCoVarId 
# axiomatize definition Core.isTyCoVarId 
# axiomatize definition Core.idInfo
# axiomatize definition Core.idDetails

redefine Definition Core.isLocalId : Var -> bool :=
  fun v => Unique.isLocalUnique (Core.varUnique v). 
redefine Definition Core.isGlobalId : Var -> bool :=
  fun v => negb (Unique.isLocalUnique (Core.varUnique v)).

axiomatize definition Core.isExportedId
#
# Only way to change the scope of a Var without using Mk_Id
#
skip Core.globaliseId
skip Core.setIdExported
skip Core.setIdNotExported
# skip Core.mk_id

# these use mk_id : only checks invariant about unique matching, not the scope
# invariant: these should be given the right uniques
# axiomatize definition Core.mkLocalVar
# axiomatize definition Core.mkGlobalVar
# axiomatize definition Core.mkExportedLocalVar

# These don't exist
skip Core.mkTyVar
skip Core.mkTcTyVar
skip Core.tcTyVarDetails 
skip Core.setTcTyVarDetails
skip Core.coVarDetails
skip Core.mkCoVar

# skip Core.mkTyVarBinder
# skip Core.mkTyVarBinders
# skip Core.tyConTyVarBinders


skip equation Core.setIdExported tv
skip equation Core.isId _
skip equation Core.isNonCoVarId _
skip equation Core.isCoVar _
skip equation Core.idInfo other
skip equation Core.idDetails other

# record selector, can't add Default fast enough
skip Core.dcr_wrap_id
skip Core.id_info

# ppr
skip Core.ppr_id_scope
skip Core.ppr_debug

order Core.Uniquable__Var Core.alterDVarEnv Core.alterVarEnv Core.delDVarEnv Core.delVarEnv Core.delDVarEnvList Core.delVarEnvList Core.delDVarSet Core.delVarSet Core.delDVarSetList Core.delVarSetList Core.delVarEnv_Directly Core.delVarSetByKey Core.elemDVarEnv Core.elemVarEnv Core.elemDVarSet Core.elemVarSet
 

order Core.Uniquable__Var Core.extendDVarEnv Core.extendVarEnv Core.extendDVarEnvList Core.extendVarEnvList Core.extendDVarEnv_C Core.extendVarEnv_C Core.extendVarSet Core.extendDVarSet Core.extendDVarSetList Core.extendVarSetList 

order Core.Uniquable__Var Core.extendVarEnv_Acc Core.extendVarEnv_C Core.extendVarEnv_Directly Core.extendVarSet 

order Core.Uniquable__Var Core.lookupDVarEnv Core.lookupVarEnv Core.lookupVarEnv_Directly Core.lookupVarEnv_NF Core.lookupVarSet Core.lookupVarSetByName Core.lookupVarSet_Directly Core.lookupWithDefaultVarEnv

order Core.Uniquable__Var Core.mkDVarEnv Core.mkVarEnv Core.mkDVarSet Core.mkVarSet Core.uniqAway'

order Core.Uniquable__Var Core.unitDVarEnv Core.unitVarEnv Core.unitDVarSet Core.unitVarSet

