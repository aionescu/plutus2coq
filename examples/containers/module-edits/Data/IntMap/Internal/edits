redefine Definition Data.IntSet.Internal.Nat := Coq.Numbers.BinNums.N.
redefine Definition Data.IntSet.Internal.Prefix := Coq.Numbers.BinNums.N.
redefine Definition Data.IntSet.Internal.BitMap := Coq.Numbers.BinNums.N.
redefine Definition Data.IntSet.Internal.Mask := Coq.Numbers.BinNums.N.

rename type GHC.Types.Int = Coq.Numbers.BinNums.N


rename value Data.IntMap.Internal.WhenMatched = Data.IntMap.Internal.Mk_WhenMatched
rename value Data.IntMap.Internal.WhenMissing = Data.IntMap.Internal.Mk_WhenMissing
rename value Data.IntMap.Internal.SplitLookup = Data.IntMap.Internal.Mk_SplitLookup
rename value Data.IntMap.Internal.View = Data.IntMap.Internal.Mk_View

rename value Data.IntMap.Internal.bool = Data.IntMap.Internal.boolITE

in Data.IntMap.Internal.fromSet       termination buildTree deferred
in Data.IntMap.Internal.mergeWithKey' termination go        deferred

## get the type classes working
order Data.IntMap.Internal.Eq___IntMap Data.IntMap.Internal.Ord__IntMap
redefine Definition Data.IntMap.Internal.Functor__IntMap_op_zlzd__ {a}{b}:= @Data.IntMap.Internal.IntMap_op_zlzd__ a b.

order Data.IntMap.Internal.Functor__IntMap Data.IntMap.Internal.mapWhenMissing
order Data.IntMap.Internal.Functor__IntMap Data.IntMap.Internal.lmapWhenMissing

#### These are TODOs:

skip Data.IntMap.Internal.Eq1__IntMap 
skip Data.IntMap.Internal.Ord1__IntMap

skip Data.IntMap.Internal.Functor__WhenMissing
skip Data.IntMap.Internal.Applicative__WhenMissing
skip Data.IntMap.Internal.Monad__WhenMissing
skip Data.IntMap.Internal.Category__WhenMissing
skip Data.IntMap.Internal.Functor__WhenMatched
skip Data.IntMap.Internal.Monad__WhenMatched
skip Data.IntMap.Internal.Applicative__WhenMatched
skip Data.IntMap.Internal.Category__WhenMatched

# Weird type error
skip Data.IntMap.Internal.mergeA
skip Data.IntMap.Internal.merge

# mutual recursion
skip Data.IntMap.Internal.fromDistinctAscListWithKey
skip Data.IntMap.Internal.fromDistinctAscList
skip Data.IntMap.Internal.fromAscListWithKey
skip Data.IntMap.Internal.fromAscListWith
skip Data.IntMap.Internal.fromAscList
skip Data.IntMap.Internal.mapKeysMonotonic

# partial
skip Data.IntMap.Internal.find
skip Data.IntMap.Internal.op_zn__
skip Data.IntMap.Internal.findMax
skip Data.IntMap.Internal.findMin
skip Data.IntMap.Internal.maxView
skip Data.IntMap.Internal.maxViewWithKeySure
skip Data.IntMap.Internal.maxViewWithKey
skip Data.IntMap.Internal.updateMaxWithKey
skip Data.IntMap.Internal.updateMax
skip Data.IntMap.Internal.deleteMax
skip Data.IntMap.Internal.deleteFindMax
skip Data.IntMap.Internal.minView
skip Data.IntMap.Internal.minViewWithKeySure
skip Data.IntMap.Internal.minViewWithKey
skip Data.IntMap.Internal.updateMinWithKey
skip Data.IntMap.Internal.updateMin
skip Data.IntMap.Internal.deleteMin
skip Data.IntMap.Internal.deleteFindMin

# These are typical that they recurse left or right
# Because of https://github.com/coq/coq/issues/6715 we cannot use Program
# Fixpoint here until we upgrade to Coq 8.7. Therefore use unsafeFix for now.
#termination Data.IntMap.Internal.restrictKeys {measure ((size_nat arg_0__) + (Data.IntSet.Internal.size_nat arg_1__))}
#obligations Data.IntMap.Internal.restrictKeys termination_by_omega
termination Data.IntMap.Internal.restrictKeys deferred
termination Data.IntMap.Internal.withoutKeys deferred

# non-structural recursion
termination Data.IntMap.Internal.restrictBM deferred
termination Data.IntMap.Internal.withoutBM deferred

# Show stuff
skip Data.IntMap.Internal.showsBars
skip Data.IntMap.Internal.showsBitMap
skip Data.IntMap.Internal.showBitMap
skip Data.IntMap.Internal.showsTreeHang
skip Data.IntMap.Internal.showTreeWith
skip Data.IntMap.Internal.showBin
skip Data.IntMap.Internal.showWide
skip Data.IntMap.Internal.withBar
skip Data.IntMap.Internal.withEmpty
skip Data.IntMap.Internal.showsTree
skip Data.IntMap.Internal.showTree

# Data stuff
skip Data.IntMap.Internal.fromListConstr
skip Data.IntMap.Internal.intMapDataType

order Data.IntMap.Internal.Semigroup__IntMap Data.IntMap.Internal.Monoid__IntMap_mappend
order Data.IntMap.Internal.Functor__IntMap   Data.IntMap.Internal.Traversable__IntMap
order Data.IntMap.Internal.Foldable__IntMap  Data.IntMap.Internal.Traversable__IntMap

skip Data.IntMap.Internal.intFromNat
rewrite forall x, Data.IntMap.Internal.intFromNat x = x
skip Data.IntMap.Internal.natFromInt
rewrite forall x, Data.IntMap.Internal.natFromInt x = x

# `complement x` does not work at type `N`, as the complement of a natural
# number is negative. But in this module, all uses of `complement` are meant to be
# 64bit numbers anyways, so we can complement just these bits.
rewrite forall x, (Data.Bits.complement x) = (complement' x)

rewrite forall x, (x Data.Bits..&. Data.IntSet.Internal.prefixBitMask) = Coq.NArith.BinNat.N.ldiff x Data.IntSet.Internal.suffixBitMask

# Share bit stuff with IntSet
rename value Data.IntMap.Internal.mask = Data.IntSet.Internal.mask
skip Data.IntSet.Internal.mask
rename value Data.IntMap.Internal.zero = Data.IntSet.Internal.zero
skip Data.IntSet.Internal.zero

redefine Definition Data.IntMap.Internal.Foldable__IntMap_length : forall {a}, (Data.IntMap.Internal.IntMap a) -> GHC.Num.Int :=
  fun {a} x => Coq.ZArith.BinInt.Z.of_N (Data.IntMap.Internal.size x).

# Putting fixpoint type annotations in binders causes type/term namespace collision
in Data.IntMap.Internal.mapAccumRWithKey rename value a = a0
in Data.IntMap.Internal.mapAccumL        rename value a = a0
