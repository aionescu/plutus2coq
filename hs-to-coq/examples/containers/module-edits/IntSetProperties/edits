rename module Main IntSetProperties

redefine Definition Data.IntSet.Internal.Nat := Coq.Numbers.BinNums.N.
redefine Definition Data.IntSet.Internal.Prefix := Coq.Numbers.BinNums.N.
redefine Definition Data.IntSet.Internal.BitMap := Coq.Numbers.BinNums.N.
redefine Definition Data.IntSet.Internal.Mask := Coq.Numbers.BinNums.N.

rename type GHC.Types.Int = Coq.Numbers.BinNums.N

rewrite forall xs, Data.Foldable.length xs = Coq.NArith.BinNat.N.of_nat (Coq.Init.Datatypes.length xs)

skip module Test.Framework.Providers.HUnit
skip module Test.Framework.Providers.QuickCheck2
skip module Test.Framework.Runners.Console
skip module Test.HUnit.Base
skip module Test.HUnit.Lang
skip module Text.Read

skip Test.QuickCheck.Arbitrary.Arbitrary

rename value GHC.Real.^ = Coq.NArith.BinNat.N.pow
rename value enumFromTo = GHC.Enum.enumFromTo

# We define this class ourselves
skip class Test.QuickCheck.Arbitrary.Arbitrary

skip IntSetProperties.prop_Ordered         # fromAscList
skip IntSetProperties.prop_bitcount        # local fixpoint
skip IntSetProperties.prop_findMax         # findMax
skip IntSetProperties.prop_findMin         # findMin
skip IntSetProperties.prop_fromList        # head, fromAscList, fromDistinctAscList
skip IntSetProperties.prop_maxView         # maxView
skip IntSetProperties.prop_minView         # minView
skip IntSetProperties.prop_readShow        # read
skip IntSetProperties.test_LookupSomething # last, head
skip IntSetProperties.prop_LookupLT        # test_LookupSomething
skip IntSetProperties.prop_LookupLE        # test_LookupSomething
skip IntSetProperties.prop_LookupGT        # test_LookupSomething
skip IntSetProperties.prop_LookupGE        # test_LookupSomething
skip IntSetProperties.test_lookupGE        # HUnit
skip IntSetProperties.test_lookupGT        # HUnit
skip IntSetProperties.test_lookupLE        # HUnit
skip IntSetProperties.test_lookupLT        # HUnit
skip IntSetProperties.test_split           # HUnit
skip IntSetProperties.main
