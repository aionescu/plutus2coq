# need a type edit -- should return an N instead of a nat
#
skip Core.primRepSizeB

## need default DataCon for record selector, but cannot add it now
skip Core.dataCon
skip Core.data_con

## Cannot add necessary default before partial record selector
skip Core.algTcParent
skip Core.promDcRepInfo

# We're axiomatizing the whole module, so no need to axiomatize individually

# axiomatize definition Core.mkTyConKind
# axiomatize definition Core.kindTyConKeys
# axiomatize definition Core.isKindTyCon


## Needs DataCon.dataConExTyVars
# axiomatize definition Core.isDataProductTyCon_maybe
# axiomatize definition Core.isDataSumTyCon_maybe 
# axiomatize definition Core.isProductTyCon 
# axiomatize definition Core.isPromotedTupleTyCon

# axiomatize definition Core.isInjectiveTyCon
# axiomatize definition Core.isGenerativeTyCon
# axiomatize definition Core.tyConInjectivityInfo 

# axiomatize definition Core.tyConATs

# Needs ClassSpec
# skip Core.tyConAssoc_maybe
# skip Core.isTyConAssoc

## can't use Applicative ((->)A)
# skip Core.isLiftedTypeKindTyConName

# skip Core.tyConRuntimeRepInfo
# skip Core.tyConSkolem



redefine Local Definition Core.Eq___TyConFlavour_op_zeze__
   : TyConFlavour -> (TyConFlavour -> bool) := fun a b => false.


order Core.Uniquable__TyCon_getUnique Core.Uniquable__TyCon Core.Ord__TyCon_compare Core.Eq___TyCon_op_zeze__ Core.Eq___TyCon_op_zsze__ Core.Eq___TyCon Core.Ord__TyCon

order Core.Uniquable__TyCon Core.Eq___TyCon_op_zeze__ Core.Eq___TyCon_op_zsze__
order Core.Eq___PrimElemRep Core.Eq___PrimRep_op_zeze__



