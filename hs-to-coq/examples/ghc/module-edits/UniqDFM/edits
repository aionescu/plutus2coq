skip module Data.IntMap
skip UniqDFM.pprUniqDFM

order UniqDFM.Functor__UniqDFM UniqDFM.Foldable__UniqDFM UniqDFM.Traversable__UniqDFM
order UniqDFM.Semigroup__UniqDFM UniqDFM.Monoid__UniqDFM_mappend
order UniqDFM.Semigroup__UniqDFM UniqDFM.Monoid__UniqDFM_mconcat

order UniqDFM.Functor__TaggedVal UniqDFM.mapUDFM

skip UniqDFM.Functor__UniqDFM

# sizes are nats
rename type GHC.Num.Int = nat

## type inference issue
## but this redefine does nothing
redefine Local Definition UniqDFM.Functor__UniqDFM_fmap : forall {a} {b},
                                           (a -> b) -> ((UniqDFM a) -> (UniqDFM b)) :=
  fun {a} {b} =>
    fun f arg_1__ =>
      match arg_1__ with
        | UDFM a1 a2 =>
          UDFM (@GHC.Base.fmap IntMap.IntMap _ _ _ (GHC.Base.fmap f) a1)
               ((fun b1 => b1) a2)
      end.

rename value Unique.getKey = Unique.getWordKey

skip module Coq.ZArith.BinInt.Z

