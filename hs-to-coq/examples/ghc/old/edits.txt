type synonym FunDep       :-> Type
type synonym CollectedCCs :-> Type

data type arguments CoAxiom  (indices: br)
data type arguments Branches (indices: br)

# See Note [Strict positivity for IdInfo/RuntimeRepInfo], [Strict positivity for real]
skip IdInfo
redefine Inductive RuntimeRepInfo   : Set := Mk_RuntimeRepInfo_Dummy.
redefine Inductive DataConBoxer     : Set := Mk_DataConBoxer_Dummy.
redefine Inductive CoAxiomRule      : Set := Mk_CoAxiomRule_Dummy.
redefine Inductive BuiltInSynFamily : Set := Mk_BuiltInSynFamily_Dummy.

# Functionality that depends on the stubbed-out types' constructors
skip zapLamInfo
skip zapUsageInfo
skip zapDemandInfo
skip setUnfoldingInfoLazily
skip setUnfoldingInfo
skip setStrictnessInfo
skip setRuleInfo
skip setOneShotInfo
skip setOccInfo
skip setInlinePragInfo
skip setDemandInfo
skip setCallArityInfo
skip setCafInfo
skip setArityInfo
skip vanillaIdInfo

skip voidArgId
skip validIfUnliftedFFITypes
skip unliftedOnly

# needs Monad instance for UniqSM
skip unitUnboxer

# needs pattern guards (only the first one)
skip widthFromBytes
skip vecElemType
skip vec
skip vec16
skip vec2
skip vec4
skip vec8

# needs mutual recursion
skip zap_musg
skip zap_usg

skip varName

# TODO: Needs to be axiomatized, but refers to a type that isn't defined in the
# preamble.  A new kind of edit, perhaps?
skip trivialBuiltInFamily

add scope type for constructor Mk_TyCoMapper

# Without the `redefine`s breaking the data type cycles, we also need `Expr` and
# `Bind` to have the binder type `b` be a parameter instead of an index;
# however, with the cycles broken as they currently are, `Expr` and `Bind` form
# a complete mutually-recursive group on their own.

# data type arguments Expr (indices: b)
# data type arguments Bind (indices: b)

# See Note [Strict positivity for IdInfo]
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# We can't have these data types because they produce non-strictly-positive
# types.  For example,
#
#     Inductive IdInfo : Type := …
#     …
#     with CoreRule : Type := Mk_Rule :  RuleName
#                                     -> Activation
#                                     -> Name
#                                     -> list (option Name)
#                                     -> list CoreBndr
#                                     -> list CoreExpr
#                                     -> Synonym CoreExpr
#                                     -> bool
#                                     -> Module
#                                     -> IsOrphan
#                                     -> bool
#                                     -> CoreRule
#                          |  …
#     …
#     with Var : Type := …
#     …
#     with Expr : forall b, Type := …
#     …
#     .
#
# where `CoreBndr = Var` and `CoreExpr = Expr CoreBndr = Expr Var`.  The problem
# is that we can't have an `Expr Var`, because:
#
#   1. `IdInfo` (and friends) make `Expr` mutually recursive with `CoreRule` and
#      `IdInfo` and all these other types.
#
#   2. Types can't be arguments to other types in the same mutually recursive
#      groups: here, `Var` is an argument to `Expr`, both of which are in the
#      same mutually recursive group as `CoreRule`.

# See Note [Strict positivity for real]
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# These other types (`RuntimeRepInfo`, `DataConBoxer`, `CoAxiomRule`,
# `BuiltInSynFamily`) all contain actual non-strictly-positive function members
# that e.g. take `Type`s or `Pair`s of `Type`s or lists of `Type`s as arguments.
