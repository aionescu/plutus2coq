(define-generic-mode hs-to-coq-edits-mode
  '(?#)
  '("alias" "value" "type" "data" "synonym" "arguments" "parameters" "indices" "redefine" "skip" "manual" "import" "notation" "class" "kinds" "delete" "unused" "variables" "axiomatize" "definition" "unaxiomatize" "termination" "deferred" "corecursive" "coinductive" "obligations" "method" "rename" "rewrite" "order" "module" "add" "scope" "constructor" "simple" "inline" "mutual" "set" "no" "collapse" "equation" "case" "pattern" "original" "name" "promote" "polyrec" "except" "polykinds" "=" ":->")
  '(("^\\s-*\\<in\\>" . font-lock-keyword-face) ("\\<Qed\\>" . font-lock-builtin-face) ("\\<Defined\\>" . font-lock-builtin-face) ("\\<Admitted\\>" . font-lock-builtin-face) ("\\<as\\>" . font-lock-type-face) ("\\<fun\\>" . font-lock-type-face) ("\\<fix\\>" . font-lock-type-face) ("\\<cofix\\>" . font-lock-type-face) ("\\<forall\\>" . font-lock-type-face) ("\\<match\\>" . font-lock-type-face) ("\\<end\\>" . font-lock-type-face) ("\\<struct\\>" . font-lock-type-face) ("\\<with\\>" . font-lock-type-face) ("\\<for\\>" . font-lock-type-face) ("\\<measure\\>" . font-lock-type-face) ("\\<wf\\>" . font-lock-type-face) ("\\<Inductive\\>" . font-lock-builtin-face) ("\\<CoInductive\\>" . font-lock-builtin-face) ("\\<Definition\\>" . font-lock-builtin-face) ("\\<Instance\\>" . font-lock-builtin-face) ("\\<Let\\>" . font-lock-builtin-face) ("\\<let\\>" . font-lock-builtin-face) ("\\<in\\>" . font-lock-builtin-face) ("\\<Fixpoint\\>" . font-lock-builtin-face) ("\\<CoFixpoint\\>" . font-lock-builtin-face) ("\\<Local\\>" . font-lock-builtin-face) ("\\<Axiom\\>" . font-lock-builtin-face) ("\\<Theorem\\>" . font-lock-builtin-face) ("\\<Lemma\\>" . font-lock-builtin-face) ("\\<Remark\\>" . font-lock-builtin-face) ("\\<Fact\\>" . font-lock-builtin-face) ("\\<Corollary\\>" . font-lock-builtin-face) ("\\<Proposition\\>" . font-lock-builtin-face) ("\\<Example\\>" . font-lock-builtin-face) ("\\<Proof\\>" . font-lock-builtin-face))
  '("[./]edits\\'")
  nil
  "Major mode for editing hs-to-coq edit files.

Automatically generated by `./generate-edits-mode.rb'.

\{hs-to-coq-edits-mode-map}")
